---
import Layout from "./Layout.astro";
import ReflectionText from "../components/ReflectionText";
import TextGlow from "../components/TextGlow";
import type { CollectionEntry } from 'astro:content';
import '../styles/markdown.css';

interface Props {
    post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, pubDate, description, author, tags, image } = post.data;

// Format the date
const formattedDate = pubDate.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
});
---

<Layout title={title + " - Nick Russo"} description={description}>
    <Fragment slot="head">
        <!-- Schema.org structured data for blog post -->
        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                "@context": "https://schema.org",
                "@type": "BlogPosting",
                headline: title,
                description: description,
                image: image?.url,
                author: {
                    "@type": "Person",
                    name: author,
                },
                publisher: {
                    "@type": "Person",
                    name: author,
                },
                datePublished: pubDate.toISOString(),
                mainEntityOfPage: {
                    "@type": "WebPage",
                    "@id": Astro.url.href,
                },
                keywords: tags.join(", "),
            })}
        />
    </Fragment>
    <div class="max-w-prose mx-auto px-4 sm:px-6 py-8">
        <article class="prose prose-invert prose-lg max-w-none">
            <h1 class="text-4xl font-bold mb-2">
                <ReflectionText client:load>
                    <span class="text-lime-400">{title}</span>
                </ReflectionText>
            </h1>

            <div class="mb-4">
                <time datetime={pubDate.toISOString()} class="text-sm text-gray-400 block">
                    {formattedDate}
                </time>
            </div>

            <div class="flex flex-wrap gap-2 mb-8">
                {
                    tags.map((tag) => (
                        <span class="px-2 py-1 bg-space-500 rounded text-xs text-accent-blue">
                            {tag}
                        </span>
                    ))
                }
            </div>
            <div class="card-container mb-6 blog-content prose prose-invert">
                <slot />
            </div>

            <div class="flex justify-between mt-12">
                <a
                    href="/blog"
                    class="px-4 py-2 bg-space-700 hover:bg-space-600 text-white rounded-md transition-all duration-300 inline-flex items-center"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 mr-2"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Back to Blog
                </a>
            </div>
        </article>
    </div>
</Layout>
---
import Layout from "./Layout.astro";
import ReflectionText from "../components/ReflectionText.astro";
import TextGlow from "../components/TextGlow.astro";
import CodeBlock from "../components/CodeBlock.astro";
import HiringNotice from "../components/HiringNotice.astro";
import type { CollectionEntry } from 'astro:content';
import '../styles/markdown.css';

interface Props {
    post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, pubDate, description, author, tags, image } = post.data;

// Format the date
const formattedDate = pubDate.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
});

// Calculate reading time
function calculateReadingTime(text) {
    const wordsPerMinute = 200;
    const words = text.trim().split(/\s+/).length;
    const minutes = Math.ceil(words / wordsPerMinute);
    return `${minutes} min read`;
}

const readingTime = calculateReadingTime(post.body);
---

<Layout title={title + " - Nick Russo"} description={description}>
    <Fragment slot="head">
        <!-- Schema.org structured data for blog post -->
        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                "@context": "https://schema.org",
                "@type": "BlogPosting",
                headline: title,
                description: description,
                image: image?.url,
                author: {
                    "@type": "Person",
                    name: author,
                },
                publisher: {
                    "@type": "Person",
                    name: author,
                },
                datePublished: pubDate.toISOString(),
                mainEntityOfPage: {
                    "@type": "WebPage",
                    "@id": Astro.url.href,
                },
                keywords: tags.join(", "),
            })}
        />
    </Fragment>
    <!-- Article Header -->
    <section class="section">
        <div class="container container-md">
            <div class="text-center mb-12">
                <h1 class="heading-1 mb-6">
                    <span class="text-accent-blue">{title}</span>
                </h1>
                
                <div class="flex items-center justify-center gap-4 mb-8 body-small text-text-tertiary">
                    <time datetime={pubDate.toISOString()}>
                        {formattedDate}
                    </time>
                    <span>â€¢</span>
                    <span>{readingTime}</span>
                </div>

                <div class="flex flex-wrap justify-center gap-2">
                    {
                        tags.map((tag) => (
                            <span class="badge badge-primary">
                                {tag}
                            </span>
                        ))
                    }
                </div>
            </div>

            <!-- Article Content -->
            <div class="glass-card p-12">
                <article class="blog-content prose prose-invert max-w-none">
                    <slot />
                    <CodeBlock />
                </article>
            </div>
        </div>
    </section>

    <div class="divider"></div>

    <!-- Hiring Notice -->
    <section class="section-sm">
        <div class="container container-md">
            <HiringNotice />
        </div>
    </section>

    <div class="divider"></div>

    <!-- Navigation -->
    <section class="section-sm">
        <div class="container container-md">
            <div class="text-center">
                <a href="/blog" class="btn btn-secondary link-arrow">
                    Back to Blog
                </a>
            </div>
        </div>
    </section>
</Layout>
---
import Layout from "../../layouts/Layout.astro";
import ReflectionText from "../../components/ReflectionText";
import BlogPostPreview from "../../components/BlogPostPreview";

// Get all blog posts
const blogEntries = await Astro.glob('./*.astro');

// Extract post data from each blog post file, excluding the index file
const posts = blogEntries
  .filter(post => post.url && !post.url.includes('index'))
  .map(post => {
    // Direct import approach for variables declared in the .astro file
    const sourcePath = post.file;
    const url = post.url || '';
    
    // For the demonstration, we'll hardcode the post data since we know there's
    // only one blog post currently. In a more dynamic scenario, we'd parse the content.
    // As the site grows, using a proper content collection with frontmatter would be ideal.
    
    /* 
     * TODO: Future improvements:
     * 1. Convert blog posts to use Astro Content Collections with proper frontmatter
     *    instead of variable declarations: https://docs.astro.build/en/guides/content-collections/
     * 2. Use getCollection() API to fetch posts instead of Astro.glob()
     * 3. Implement proper pagination as blog posts grow
     */
    return {
      url,
      title: "Rebuilding My Personal Site with Claude Code, Solid.js, and Astro",
      pubDate: new Date("2024-03-01T12:00:00"),
      formattedDate: "March 1, 2024",
      excerpt: "My experience using Claude Code to rebuild my personal website with Solid.js and Astro featuring a space theme.",
      tags: ["Claude Code", "AI", "Solid.js", "Astro", "Web Dev", "Frontend"]
    };
  })
  // Sort posts by date (newest first)
  .sort((a, b) => b.pubDate.getTime() - a.pubDate.getTime());
---

<Layout title="Blog - Nick Russo">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <h1 class="text-4xl font-bold mb-2 text-center">
            <span class="text-accent-purple">
                <ReflectionText client:load>My</ReflectionText>
            </span>
            <span class="text-white">
                <ReflectionText client:load>Blog</ReflectionText>
            </span>
        </h1>

        <p class="text-center text-gray-400 mb-12">
            Thoughts on software development, programming languages, and more
        </p>

        <div class="space-y-8">
            {posts.map((post) => <BlogPostPreview post={post} />)}

            {
                posts.length === 0 && (
                    <div class="text-center py-12 text-gray-500">
                        <p>No posts found. Check back soon!</p>
                    </div>
                )
            }
        </div>
    </div>
</Layout>
